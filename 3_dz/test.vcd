$date
	Mon May 20 23:17:57 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_IIR_1 $end
$var wire 17 ! data_out [16:0] $end
$var reg 1 " clk $end
$var reg 8 # data_in [7:0] $end
$scope module filter $end
$var wire 1 " clk $end
$var wire 8 $ x [7:0] $end
$var wire 17 % y [16:0] $end
$var wire 16 & out_y_mult_a_square [15:0] $end
$var wire 16 ' out_y_mult_a [15:0] $end
$var wire 16 ( out_x_mult_b [15:0] $end
$var wire 16 ) out_x_mult_a_b [15:0] $end
$var wire 16 * out_x_mult_a_a_b [15:0] $end
$var reg 9 + count [8:0] $end
$var reg 8 , x_ [7:0] $end
$var reg 8 - x_minus1 [7:0] $end
$var reg 8 . x_minus2 [7:0] $end
$var reg 8 / x_minus3 [7:0] $end
$var reg 8 0 x_mult_a_a_b [7:0] $end
$var reg 8 1 x_mult_a_b [7:0] $end
$var reg 8 2 x_mult_b [7:0] $end
$var reg 17 3 y_ [16:0] $end
$var reg 17 4 y_minus1 [16:0] $end
$var reg 17 5 y_minus2 [16:0] $end
$var reg 16 6 y_mult_a [15:0] $end
$var reg 16 7 y_mult_a_square [15:0] $end
$var reg 17 8 y_out [16:0] $end
$scope module m_x_mult_a_a_b $end
$var wire 1 " clk $end
$var wire 16 9 mult_1 [15:0] $end
$var wire 16 : mult_2 [15:0] $end
$var wire 16 ; res [15:0] $end
$var reg 16 < result [15:0] $end
$var reg 16 = temp [15:0] $end
$upscope $end
$scope module m_x_mult_a_b $end
$var wire 1 " clk $end
$var wire 16 > mult_1 [15:0] $end
$var wire 16 ? mult_2 [15:0] $end
$var wire 16 @ res [15:0] $end
$var reg 16 A result [15:0] $end
$var reg 16 B temp [15:0] $end
$upscope $end
$scope module m_x_mult_b $end
$var wire 1 " clk $end
$var wire 16 C mult_1 [15:0] $end
$var wire 16 D mult_2 [15:0] $end
$var wire 16 E res [15:0] $end
$var reg 16 F result [15:0] $end
$var reg 16 G temp [15:0] $end
$upscope $end
$scope module m_y_mult_a $end
$var wire 1 " clk $end
$var wire 16 H mult_1 [15:0] $end
$var wire 16 I mult_2 [15:0] $end
$var wire 16 J res [15:0] $end
$var reg 16 K result [15:0] $end
$var reg 16 L temp [15:0] $end
$upscope $end
$scope module m_y_mult_a_square $end
$var wire 1 " clk $end
$var wire 16 M mult_1 [15:0] $end
$var wire 16 N mult_2 [15:0] $end
$var wire 16 O res [15:0] $end
$var reg 16 P result [15:0] $end
$var reg 16 Q temp [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx Q
bx P
bx O
bx N
b1111111111111111 M
bx L
bx K
bx J
bx I
b1 H
bx G
bx F
bx E
bx D
b1 C
bx B
bx A
bx @
bx ?
b1111111111111111 >
bx =
bx <
bx ;
bx :
b1 9
b0 8
bx 7
bx 6
b0 5
b0 4
b0 3
bx 2
bx 1
bx 0
b0 /
b0 .
b0 -
b0 ,
b0 +
bx *
bx )
bx (
bx '
bx &
b0 %
b1 $
b1 #
0"
b0 !
$end
#5
b1 +
b1 ,
b1 D
b1 2
1"
#10
0"
#15
b10 +
b1 -
b1 G
1"
#20
0"
#25
b1 (
b1 E
b1 F
b11 +
b1 .
bx 3
1"
#30
0"
#35
b100 +
b1 /
bx !
bx %
bx 8
b1 4
1"
#40
0"
#45
b101 +
bx 4
bx 7
bx N
1"
#50
0"
#55
1"
#60
0"
#65
1"
#70
0"
#75
1"
#80
0"
#85
1"
#90
0"
#95
1"
#100
0"
#105
1"
#110
0"
#115
1"
#120
0"
